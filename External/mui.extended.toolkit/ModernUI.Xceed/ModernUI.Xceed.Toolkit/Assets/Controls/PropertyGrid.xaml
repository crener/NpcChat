<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib">

  <ResourceDictionary.MergedDictionaries>
    <ResourceDictionary Source="ColorPicker.xaml" />
    <ResourceDictionary Source="DateTimeUpDown.xaml" />
    <ResourceDictionary Source="NumericUpDown.xaml" />
    <ResourceDictionary Source="TimeSpanUpDown.xaml" />
    <ResourceDictionary Source="WatermarkTextBox.xaml" />
  </ResourceDictionary.MergedDictionaries>

  <!-- =============================================================================== -->
  <!-- PropertyGrid                                                                    -->
  <!-- =============================================================================== -->

  <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
  <xctk:InverseBoolConverter x:Key="InverseBoolConverter" />
  <xctk:HalfConverter x:Key="HalfConverter" />
  <xctk:NullToBoolConverter x:Key="NullToBoolConverter"/>
  <xctk:ExpandableObjectMarginConverter x:Key="ExpandableObjectMarginConverter" />
  <xctk:ObjectToUIElementConverter x:Key="ObjectToUiElementConverter" />
  <xctk:IsStringEmptyConverter x:Key="IsStringEmptyConverter" />
  <xctk:IsDefaultCategoryConverter x:Key="IsDefaultCategoryConverter" />
  <xctk:SelectedObjectConverter x:Key="ObjectConverter" />

  <x:Static x:Key="EmptyString" Member="sys:String.Empty" />

  <!-- PropertyGrid numeric Editors -->
  <Style TargetType="{x:Type xctk:PropertyGridEditorByteUpDown}" BasedOn="{StaticResource NumericUpDown}">
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Padding" Value="1" />
    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsKeyboardFocusWithin" Value="False" />
          <Condition Property="IsMouseOver" Value="False" />
        </MultiTrigger.Conditions>
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="ShowButtonSpinner" Value="False" />
      </MultiTrigger>
    </Style.Triggers>
  </Style>

  <Style TargetType="{x:Type xctk:PropertyGridEditorDecimalUpDown}" BasedOn="{StaticResource NumericUpDown}">
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Padding" Value="1" />
    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsKeyboardFocusWithin" Value="False" />
          <Condition Property="IsMouseOver" Value="False" />
        </MultiTrigger.Conditions>
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="ShowButtonSpinner" Value="False" />
      </MultiTrigger>
    </Style.Triggers>
  </Style>

  <Style TargetType="{x:Type xctk:PropertyGridEditorDoubleUpDown}" BasedOn="{StaticResource NumericUpDown}">
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Padding" Value="1" />
    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsKeyboardFocusWithin" Value="False" />
          <Condition Property="IsMouseOver" Value="False" />
        </MultiTrigger.Conditions>
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="ShowButtonSpinner" Value="False" />
      </MultiTrigger>
    </Style.Triggers>
  </Style>

  <Style TargetType="{x:Type xctk:PropertyGridEditorIntegerUpDown}" BasedOn="{StaticResource NumericUpDown}">
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Padding" Value="1" />
    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsKeyboardFocusWithin" Value="False" />
          <Condition Property="IsMouseOver" Value="False" />
        </MultiTrigger.Conditions>
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="ShowButtonSpinner" Value="False" />
      </MultiTrigger>
    </Style.Triggers>
  </Style>

  <Style TargetType="{x:Type xctk:PropertyGridEditorLongUpDown}" BasedOn="{StaticResource NumericUpDown}">
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Padding" Value="1" />
    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsKeyboardFocusWithin" Value="False" />
          <Condition Property="IsMouseOver" Value="False" />
        </MultiTrigger.Conditions>
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="ShowButtonSpinner" Value="False" />
      </MultiTrigger>
    </Style.Triggers>
  </Style>

  <Style TargetType="{x:Type xctk:PropertyGridEditorShortUpDown}" BasedOn="{StaticResource NumericUpDown}">
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Padding" Value="1" />
    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsKeyboardFocusWithin" Value="False" />
          <Condition Property="IsMouseOver" Value="False" />
        </MultiTrigger.Conditions>
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="ShowButtonSpinner" Value="False" />
      </MultiTrigger>
    </Style.Triggers>
  </Style>

  <Style TargetType="{x:Type xctk:PropertyGridEditorSingleUpDown}" BasedOn="{StaticResource NumericUpDown}">
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Padding" Value="1" />
    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsKeyboardFocusWithin" Value="False" />
          <Condition Property="IsMouseOver" Value="False" />
        </MultiTrigger.Conditions>
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="ShowButtonSpinner" Value="False" />
      </MultiTrigger>
    </Style.Triggers>
  </Style>

  <!-- PropertyGrid DateTime Editors -->
  <Style TargetType="{x:Type xctk:PropertyGridEditorDateTimeUpDown}" BasedOn="{StaticResource DateTimeUpDown}">
    <Setter Property="BorderThickness" Value="0" />
    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsKeyboardFocusWithin" Value="False" />
          <Condition Property="IsMouseOver" Value="False" />
        </MultiTrigger.Conditions>
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="ShowButtonSpinner" Value="False" />
      </MultiTrigger>
    </Style.Triggers>
  </Style>

  <!-- PropertyGrid TimeSpan Editors -->
  <Style TargetType="{x:Type xctk:PropertyGridEditorTimeSpanUpDown}" BasedOn="{StaticResource TimeSpanUpDown}">
    <Setter Property="BorderThickness" Value="0" />
    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsKeyboardFocusWithin" Value="False" />
          <Condition Property="IsMouseOver" Value="False" />
        </MultiTrigger.Conditions>
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="ShowButtonSpinner" Value="False" />
      </MultiTrigger>
    </Style.Triggers>
  </Style>

  <!-- PropertyGrid ComboBox Editors -->
  <Style TargetType="{x:Type xctk:PropertyGridEditorComboBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
    <Setter Property="BorderThickness" Value="0" />
    <Style.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Foreground" Value="{DynamicResource ItemTextDisabled}" />
      </Trigger>
    </Style.Triggers>
  </Style>

  <!-- PropertyGrid CheckBox Editors -->
  <Style TargetType="{x:Type xctk:PropertyGridEditorCheckBox}" BasedOn="{StaticResource {x:Type CheckBox}}">
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Margin" Value="5,0,0,0" />
  </Style>

  <!-- PropertyGrid TextBox Editors -->
  <Style TargetType="{x:Type xctk:PropertyGridEditorTextBox}" BasedOn="{StaticResource WatermarkTextBox}">
    <Setter Property="BorderThickness" Value="0" />
    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsKeyboardFocusWithin" Value="False" />
          <Condition Property="IsMouseOver" Value="False" />
        </MultiTrigger.Conditions>
        <Setter Property="BorderBrush" Value="Transparent" />
      </MultiTrigger>
    </Style.Triggers>
  </Style>

  <!-- PropertyGrid TextBlock Editors -->
  <Style TargetType="{x:Type xctk:PropertyGridEditorTextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
    <Setter Property="Foreground" Value="{DynamicResource ItemText}" />
  </Style>

  <!-- PropertyGrid ColorPicker Editors -->
  <Style TargetType="{x:Type xctk:PropertyGridEditorColorPicker}" BasedOn="{StaticResource ColorPicker}">
    <Setter Property="BorderThickness" Value="0" />
    <Style.Triggers>
      <MultiTrigger>
        <MultiTrigger.Conditions>
          <Condition Property="IsKeyboardFocusWithin" Value="False" />
          <Condition Property="IsMouseOver" Value="False" />
        </MultiTrigger.Conditions>
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="ShowDropDownButton" Value="False" />
      </MultiTrigger>
    </Style.Triggers>
  </Style>


  <!-- PropertyGrid PrimitiveTypeCollectionControl Editors -->
  <!--
    <Style TargetType="{x:Type xctk:PropertyGridEditorPrimitiveTypeCollectionControl}" BasedOn="{StaticResource PrimitiveTypeCollectionControl}">
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Content" Value="(Collection)" />
    </Style>

    -->
  <!-- PropertyGrid CollectionControl Editors -->
  <!--
    <Style TargetType="{x:Type xctk:PropertyGridEditorCollectionControl}" BasedOn="{StaticResource CollectionControlButton}">
    </Style>-->

  <!-- ===============================================================================   -->
  <!-- Style for all internal derived types of NumericUpDown will be done in code-behind -->
  <!-- for external themes to redefine the default style. The reason is that the         -->
  <!-- toolkit.dll uses the InternalsVisibleTo attribute which makes internal data only  -->
  <!-- available in code-behind(not xaml).                                               -->
  <!-- (ex. Office2007 theme)                                                            -->
  <!-- ===============================================================================   -->

  <!-- Internal PropertyGrid numeric Editors -->
  <!--<Style TargetType="{x:Type xctk:PropertyGridEditorSByteUpDown}"
          BasedOn="{StaticResource NumericUpDown}">
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsKeyboardFocusWithin"
                          Value="False" />
                    <Condition Property="IsMouseOver"
                          Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush"
                    Value="Transparent" />
                <Setter Property="ShowButtonSpinner"
                    Value="False" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type xctk:PropertyGridEditorUIntegerUpDown}"
          BasedOn="{StaticResource NumericUpDown}">
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsKeyboardFocusWithin"
                          Value="False" />
                    <Condition Property="IsMouseOver"
                          Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush"
                    Value="Transparent" />
                <Setter Property="ShowButtonSpinner"
                    Value="False" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type xctk:PropertyGridEditorULongUpDown}"
          BasedOn="{StaticResource NumericUpDown}">
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsKeyboardFocusWithin"
                          Value="False" />
                    <Condition Property="IsMouseOver"
                          Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush"
                    Value="Transparent" />
                <Setter Property="ShowButtonSpinner"
                    Value="False" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type xctk:PropertyGridEditorUShortUpDown}"
          BasedOn="{StaticResource NumericUpDown}">
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsKeyboardFocusWithin"
                          Value="False" />
                    <Condition Property="IsMouseOver"
                          Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush"
                    Value="Transparent" />
                <Setter Property="ShowButtonSpinner"
                    Value="False" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>-->




  <Style x:Key="OptionsToggleButtonStyle" TargetType="{x:Type RadioButton}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    <Setter Property="Height" Value="22" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="ToolTipService.InitialShowDelay" Value="900" />
    <Setter Property="ToolTipService.ShowDuration" Value="20000" />
    <Setter Property="ToolTipService.BetweenShowDelay" Value="0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type RadioButton}">
          <Grid SnapsToDevicePixels="True">
            <Border x:Name="OuterBorder"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}"
              Background="{TemplateBinding Background}"
              CornerRadius="0" />
            <Border x:Name="MiddleBorder"
              BorderBrush="Transparent"
              BorderThickness="{TemplateBinding BorderThickness}"
              Background="Transparent"
              CornerRadius="0">
              <Border x:Name="InnerBorder"
               BorderBrush="Transparent"
               BorderThickness="{TemplateBinding BorderThickness}"
               Background="Transparent"
               CornerRadius="0"
               Padding="{TemplateBinding Padding}">
                <StackPanel x:Name="StackPanel"
                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                  <ContentPresenter x:Name="Content"
                           Content="{TemplateBinding Content}"
                           Margin="1"
                           RenderOptions.BitmapScalingMode="NearestNeighbor"
                           VerticalAlignment="Center"
                           HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
                </StackPanel>
              </Border>
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter Property="Background" TargetName="OuterBorder" Value="{DynamicResource ButtonBackgroundHover}" />
              <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{DynamicResource ButtonBorderHover}" />
            </Trigger>

            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Opacity" TargetName="Content" Value="0.5" />
              <Setter Property="TextElement.Foreground" TargetName="OuterBorder" Value="{DynamicResource ItemTextDisabled}" />
            </Trigger>

            <Trigger Property="IsChecked" Value="True">
              <Setter Property="Background" TargetName="OuterBorder" Value="{DynamicResource ButtonBackground}" />
              <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{DynamicResource ButtonBorderPressed}" />
            </Trigger>

            <Trigger Property="IsPressed" Value="True">
              <Setter Property="Background" TargetName="OuterBorder" Value="{DynamicResource ButtonBackgroundPressed}" />
              <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{DynamicResource ButtonBorderPressed}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="ClearFilterButtonStyle" TargetType="{x:Type Button}">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Height" Value="22" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="ToolTipService.InitialShowDelay" Value="900" />
    <Setter Property="ToolTipService.ShowDuration" Value="20000" />
    <Setter Property="ToolTipService.BetweenShowDelay" Value="0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Grid SnapsToDevicePixels="True" HorizontalAlignment="Center">
            <Border x:Name="OuterBorder"
              BorderBrush="{TemplateBinding BorderBrush}"
              BorderThickness="{TemplateBinding BorderThickness}"
              Background="{TemplateBinding Background}"
              HorizontalAlignment="Center"
              CornerRadius="0" />
            <Border x:Name="MiddleBorder"
              BorderBrush="Transparent"
              BorderThickness="{TemplateBinding BorderThickness}"
              HorizontalAlignment="Center"
              Background="Transparent"
              CornerRadius="0">
              <Border x:Name="InnerBorder"
               BorderBrush="Transparent"
               BorderThickness="{TemplateBinding BorderThickness}"
               HorizontalAlignment="Center"
               Background="Transparent"
               CornerRadius="0"
               Padding="2">
                <StackPanel x:Name="StackPanel" HorizontalAlignment="Center">
                  <Path x:Name="clearPath" Fill="{DynamicResource ItemTextDisabled}" Stretch="Uniform" Height="16"
                        HorizontalAlignment="Center" Margin="0,2,0,0"
                        Data="F1 M 26.9166,22.1667L 37.9999,33.25L 49.0832,22.1668L 53.8332,26.9168L 42.7499,38L 53.8332,49.0834L 49.0833,53.8334L 37.9999,42.75L 26.9166,53.8334L 22.1666,49.0833L 33.25,38L 22.1667,26.9167L 26.9166,22.1667 Z"
                        />
                </StackPanel>
              </Border>
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="clearPath" Property="Fill" Value="{DynamicResource ItemTextHover}" />
            </Trigger>

            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Visibility" Value="Collapsed" />
            </Trigger>

            <Trigger Property="IsPressed" Value="True">
              <Setter TargetName="clearPath" Property="Fill" Value="{DynamicResource ItemText}" />
              <Setter Property="Background" TargetName="OuterBorder" Value="{DynamicResource ButtonBackgroundPressed}" />
              <Setter Property="BorderBrush" TargetName="OuterBorder" Value="{DynamicResource ButtonBorderPressed}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <ControlTemplate x:Key="ExpanderToggleButton" TargetType="{x:Type ToggleButton}">
    <Grid>
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="20" />
        <ColumnDefinition Width="*" />
      </Grid.ColumnDefinitions>

      <Rectangle Margin="0,0,0,0"
              x:Name="Rectangle"
              Fill="Transparent" />
      <Path Grid.Column="0" HorizontalAlignment="Center"
         x:Name="Up_Arrow"
         VerticalAlignment="Center"
         Fill="{DynamicResource ItemText}"
         Data="M 0 0 L 4 4 L 8 0 Z"
         RenderTransformOrigin="0.5,0.5">
        <Path.RenderTransform>
          <TransformGroup>
            <ScaleTransform ScaleX="1"
                      ScaleY="1" />
            <SkewTransform AngleX="0"
                     AngleY="0" />
            <RotateTransform Angle="-90" />
            <TranslateTransform X="0"
                          Y="0" />
          </TransformGroup>
        </Path.RenderTransform>
      </Path>
      <Path Grid.Column="0" Visibility="Collapsed"
         HorizontalAlignment="Center"
         x:Name="Down_Arrow"
         VerticalAlignment="Center"
         Fill="{DynamicResource ItemText}"
         Data="M 0 4 L 4 0 L 8 4 Z"
         RenderTransformOrigin="0.5,0.5">
        <Path.RenderTransform>
          <TransformGroup>
            <ScaleTransform ScaleX="1"
                      ScaleY="1" />
            <SkewTransform AngleX="0"
                     AngleY="0" />
            <RotateTransform Angle="135" />
            <TranslateTransform X="0"
                          Y="0" />
          </TransformGroup>
        </Path.RenderTransform>
      </Path>

      <ContentPresenter Grid.Column="1" />
    </Grid>
    <ControlTemplate.Triggers>
      <Trigger Property="IsChecked"
            Value="true">
        <Setter Property="Visibility"
            Value="Visible"
            TargetName="Down_Arrow" />
        <Setter Property="Visibility"
            Value="Collapsed"
            TargetName="Up_Arrow" />
        <Setter Property="OpacityMask"
            TargetName="Down_Arrow"
            Value="{DynamicResource ItemText}" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <Style x:Key="ExpanderStyle" TargetType="{x:Type Expander}">
    <Setter Property="Padding" Value="0" />
    <Setter Property="Background" Value="{DynamicResource PopupBackground}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Expander}">
          <Grid>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="*" x:Name="ContentRow" />
            </Grid.RowDefinitions>
            <Border x:Name="Border"
              Background="{TemplateBinding Background}"
              BorderBrush="{DynamicResource ItemBorder}">
              <ToggleButton Template="{StaticResource ExpanderToggleButton}"
                     IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                     OverridesDefaultStyle="True">
                <ContentPresenter Margin="1"
                          RecognizesAccessKey="True"
                          ContentSource="Header"
                          TextElement.FontWeight="Bold" />
              </ToggleButton>
            </Border>
            <Border Visibility="Collapsed"
              Grid.Row="1"
              x:Name="ExpandSite"
              Background="{DynamicResource PopupBackground}"
              Padding="10 0 0 0">
              <Border BorderThickness="0"
               Margin="0"
               Padding="0"
               VerticalAlignment="Stretch"
               HorizontalAlignment="Stretch">
                <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                          Margin="{TemplateBinding Padding}"
                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                          Focusable="false" />
              </Border>
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsExpanded"
               Value="True">
              <Setter Property="Visibility"
               Value="Visible"
               TargetName="ExpandSite" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="PropertyExpanderStyle"
        TargetType="{x:Type Expander}">
    <Setter Property="Padding"
          Value="10 0 0 0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Expander}">
          <Grid>
            <Border Visibility="Collapsed"
              Grid.Row="0"
              x:Name="ExpandSite"
              Padding="0 0 0 0">
              <Border BorderThickness="0"
               Margin="0"
               Padding="0"
               VerticalAlignment="Stretch"
               HorizontalAlignment="Stretch">
                <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                          Focusable="false" />
              </Border>
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsExpanded"
               Value="True">
              <Setter Property="Visibility"
               Value="Visible"
               TargetName="ExpandSite" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="PropertyItemGroupContainerStyle"
        TargetType="{x:Type GroupItem}">
    <Style.Resources>
    </Style.Resources>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate>
          <Border>
            <Expander x:Name="expander"
                Header="{Binding Name}"
                Style="{StaticResource ExpanderStyle}"
                IsExpanded="True">
              <ItemsPresenter />
            </Expander>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>

    <Style.Triggers>
      <MultiDataTrigger>
        <MultiDataTrigger.Conditions>
          <Condition Binding="{Binding Name, Converter={StaticResource IsDefaultCategoryConverter}}"
                Value="True" />
          <Condition Binding="{Binding IsMiscCategoryLabelHidden, RelativeSource={RelativeSource AncestorType={x:Type xctk:PropertyGrid}}}"
                Value="True" />
        </MultiDataTrigger.Conditions>
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type GroupItem}">
              <!-- No Expander for the Misc Category if IsMiscCategoryLabelHidden == true-->
              <ItemsPresenter />
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </MultiDataTrigger>
    </Style.Triggers>
  </Style>

  <Style x:Key="SingleDefaultCategoryItemGroupContainerStyle"
        TargetType="{x:Type GroupItem}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate>
          <!-- No Expander for the Misc Category if Misc category is the only category-->
          <ItemsPresenter />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <ContextMenu x:Key="{ComponentResourceKey 
                  TypeInTargetAssembly={x:Type xctk:PropertyGrid}, 
                  ResourceId=SelectedObjectAdvancedOptionsMenu}">
    <MenuItem Header="Reset Value"
            Command="xctk:PropertyItemCommands.ResetValue" />
  </ContextMenu>

  <xctk:CategoryGroupStyleSelector x:Key="CategoryGroupStyleSelector"
                                SingleDefaultCategoryItemGroupStyle="{StaticResource SingleDefaultCategoryItemGroupContainerStyle}"
                                ItemGroupStyle="{StaticResource PropertyItemGroupContainerStyle}" />

  <Style TargetType="{x:Type xctk:PropertyItem}">
    <Setter Property="Background" Value="{DynamicResource WindowBackground}" />
    <!-- Set the margin at 1 pixel bottom to let the horizontal "line" effect appear. -->
    <Setter Property="Margin" Value="0,0,0,1" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type xctk:PropertyItemBase}">
          <Border ContextMenu="{Binding AdvancedOptionsMenu, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=xctk:PropertyGrid}}"
             ContextMenuService.Placement="Bottom">
            <Grid VerticalAlignment="Stretch"
            HorizontalAlignment="Stretch">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="{Binding NameColumnWidth, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type xctk:PropertyGrid}}}" />
                <ColumnDefinition Width="*" />
              </Grid.ColumnDefinitions>
              <Grid.RowDefinitions>
                <RowDefinition />
                <RowDefinition Height="Auto" />
              </Grid.RowDefinitions>

              <!-- Set the BorderThickness at 1 pixel to the right to let the "vertical line" appear -->
              <Border x:Name="PART_Name"
               Background="{TemplateBinding Background}"
               BorderBrush="{TemplateBinding BorderBrush}"
               BorderThickness="{TemplateBinding BorderThickness}"
               Margin="0,0,1,0"
               VerticalAlignment="Stretch"
               HorizontalAlignment="Stretch">
                <Grid Margin="2,2,2,2" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                  </Grid.ColumnDefinitions>

                  <Grid Margin="{Binding Level, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ExpandableObjectMarginConverter}}">
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="15" />
                      <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>

                    <ToggleButton x:Name="_expandableButton"
                        Grid.Column="0"
                        Template="{StaticResource ExpanderToggleButton}"
                        OverridesDefaultStyle="True"
                        IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                        Visibility="{Binding IsExpandable, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}" />

                    <xctk:TrimmedTextBlock x:Name="_text"
                               Grid.Column="1"
                               Text="{Binding DisplayName, RelativeSource={RelativeSource TemplatedParent}}"
                               HorizontalAlignment="Stretch"
                               VerticalAlignment="Center"
                               TextTrimming="CharacterEllipsis"
                               Foreground="{DynamicResource ItemText}"
                               IsEnabled="{Binding IsReadOnly, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=xctk:PropertyGrid}, Converter={StaticResource InverseBoolConverter}}" />
                  </Grid>

                  <Grid Grid.Column="1"
               HorizontalAlignment="Right"
               Margin="5,0,5,0"
               Visibility="{Binding ShowAdvancedOptions, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=xctk:PropertyGrid}, Converter={StaticResource BooleanToVisibilityConverter}}"
               xctk:ContextMenuUtilities.OpenOnMouseLeftButtonClick="True"
               ContextMenu="{Binding AdvancedOptionsMenu, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=xctk:PropertyGrid}}">

                    <Image x:Name="_optionsImage"
                 Width="11"
                 Height="11"
                 ToolTip="{Binding AdvancedOptionsTooltip, RelativeSource={RelativeSource TemplatedParent}}" />
                  </Grid>
                </Grid>
              </Border>

              <Border x:Name="PART_Editor"
               Grid.Row="0" Grid.Column="1"
               Background="{TemplateBinding Background}"
               BorderBrush="{TemplateBinding BorderBrush}"
               BorderThickness="{TemplateBinding BorderThickness}"
               KeyboardNavigation.DirectionalNavigation="None"
               VerticalAlignment="Stretch"
               HorizontalAlignment="Stretch">
                <Border.ToolTip>
                  <ToolTip Visibility="Collapsed" />
                </Border.ToolTip>
                <ContentControl x:Name="PART_ValueContainer"
                        Content="{TemplateBinding Editor}"
                        Focusable="False"
                        IsTabStop="False"
                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                        IsEnabled="{Binding IsReadOnly, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=xctk:PropertyGrid}, Converter={StaticResource InverseBoolConverter}}">
                </ContentControl>
              </Border>

              <Expander x:Name="_propertyExpander"
                 Grid.ColumnSpan="2" Grid.Column="0"
                 Grid.Row="1"
                 IsExpanded="{TemplateBinding IsExpanded}"
                 Style="{StaticResource PropertyExpanderStyle}"
                 IsEnabled="True">
                <xctk:PropertyItemsControl x:Name="PART_PropertyItemsControl"
                                 IsTabStop="False"
                                 Focusable="False"
                                 Background="{DynamicResource WindowBackground}"
                                 ItemsSource="{Binding Properties, RelativeSource={RelativeSource TemplatedParent}}"
                                 ItemContainerStyle="{Binding PropertyContainerStyle, RelativeSource={RelativeSource TemplatedParent}}">
                  <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                      <VirtualizingStackPanel />
                    </ItemsPanelTemplate>
                  </ItemsControl.ItemsPanel>

                  <ItemsControl.GroupStyle>
                    <GroupStyle ContainerStyleSelector="{StaticResource CategoryGroupStyleSelector}" />
                  </ItemsControl.GroupStyle>

                </xctk:PropertyItemsControl>
              </Expander>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter TargetName="PART_Name" Property="Background" Value="{DynamicResource ButtonBackgroundHover}" />
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
              <Setter TargetName="PART_Name" Property="Background" Value="{DynamicResource ButtonBorderHover}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Foreground" TargetName="PART_ValueContainer" Value="{DynamicResource InputTextDisabled}" />
              <Setter Property="Foreground" TargetName="_text" Value="{DynamicResource InputTextDisabled}" />
            </Trigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding ShowDescriptionByTooltip, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=xctk:PropertyGrid}}" Value="True" />
                <Condition Binding="{Binding Description, RelativeSource={RelativeSource Self}, Converter={StaticResource IsStringEmptyConverter}}" Value="False" />
              </MultiDataTrigger.Conditions>
              <Setter Property="ToolTipService.ToolTip"
               Value="{Binding Description, RelativeSource={RelativeSource TemplatedParent}}"
               TargetName="PART_Name" />
            </MultiDataTrigger>
            <Trigger Property="Validation.HasError"
               Value="true">
              <Setter Property="ToolTip"
               Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=(Validation.Errors).CurrentItem.ErrorContent}" />
            </Trigger>
            <Trigger Property="Visibility"
               Value="Visible"
               SourceName="_expandableButton">
              <Setter Property="Focusable"
               Value="False" />
            </Trigger>

            <!--<DataTrigger Binding="{Binding ElementName=_optionsImage, Path=ToolTip}"
                   Value="{x:Static xctk:StringConstants.Local}">
              <Setter TargetName="_optionsImage"
               Property="Source"
               Value="../Images/Local11.png" />
            </DataTrigger>
            <DataTrigger Binding="{Binding ElementName=_optionsImage, Path=ToolTip}"
                   Value="{x:Static xctk:StringConstants.Resource}">
              <Setter TargetName="_optionsImage"
               Property="Source"
               Value="../Images/Resource11.png" />
            </DataTrigger>
            <DataTrigger Binding="{Binding ElementName=_optionsImage, Path=ToolTip}"
                   Value="{x:Static xctk:StringConstants.Databinding}">
              <Setter TargetName="_optionsImage"
               Property="Source"
               Value="../Images/Database11.png" />
            </DataTrigger>
            <DataTrigger Binding="{Binding ElementName=_optionsImage, Path=ToolTip}"
                   Value="{x:Static xctk:StringConstants.Inheritance}">
              <Setter TargetName="_optionsImage"
               Property="Source"
               Value="../Images/Inheritance11.png" />
            </DataTrigger>
            <DataTrigger Binding="{Binding ElementName=_optionsImage, Path=ToolTip}"
                   Value="{x:Static xctk:StringConstants.StyleSetter}">
              <Setter TargetName="_optionsImage"
               Property="Source"
               Value="../Images/Style11.png" />
            </DataTrigger>
            <DataTrigger Binding="{Binding ElementName=_optionsImage, Path=ToolTip}"
                   Value="{x:Static xctk:StringConstants.AdvancedProperties}">
              <Setter TargetName="_optionsImage"
               Property="Source"
               Value="../Images/AdvancedProperties11.png" />
            </DataTrigger>-->
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="{x:Type xctk:PropertyGrid}">
    <Setter Property="AdvancedOptionsMenu"
          Value="{StaticResource {ComponentResourceKey TypeInTargetAssembly={x:Type xctk:PropertyGrid}, ResourceId=SelectedObjectAdvancedOptionsMenu}}" />
    <Setter Property="Background"
          Value="{DynamicResource ButtonBackground}" />
    <Setter Property="BorderBrush"
          Value="{DynamicResource ButtonBorder}" />
    <Setter Property="BorderThickness"
          Value="1" />
    <Setter Property="SelectedObjectType"
          Value="{Binding RelativeSource={RelativeSource Self}, Path=SelectedObject, Converter={StaticResource ObjectConverter}, ConverterParameter=Type}" />
    <Setter Property="SelectedObjectTypeName"
          Value="{Binding RelativeSource={RelativeSource Self}, Path=SelectedObject, Converter={StaticResource ObjectConverter}, ConverterParameter=TypeName}" />
    <Setter Property="SelectedObjectName"
          Value="{Binding RelativeSource={RelativeSource Self}, Path=SelectedObject, Converter={StaticResource ObjectConverter}, ConverterParameter=SelectedObjectName}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type xctk:PropertyGrid}">
          <Border Background="{TemplateBinding Background}"
             BorderBrush="{TemplateBinding BorderBrush}"
             BorderThickness="{TemplateBinding BorderThickness}">
            <Grid Margin="{TemplateBinding Padding}">
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition />
                <RowDefinition Height="5" />
                <RowDefinition Height="Auto" />
              </Grid.RowDefinitions>

              <StackPanel x:Name="selectObjectNamePanel" Orientation="Horizontal">
                <Border Visibility="{Binding ShowPreview, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}"
                   BorderThickness="1"
                   Width="44"
                   Height="44"
                   Margin="6,4,0,4"
                   Padding="2">
                  <Rectangle>
                    <Rectangle.Fill>
                      <VisualBrush Stretch="Uniform"
                           Visual="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ObjectToUiElementConverter}, Path=SelectedObject}" />
                    </Rectangle.Fill>
                  </Rectangle>
                </Border>
                <StackPanel Orientation="Horizontal"
                       VerticalAlignment="Center"
                       Margin="6,2,6,4"
                       Visibility="{Binding ShowTitle, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}">
                  <Grid MaxWidth="{Binding ActualWidth, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource HalfConverter}, ConverterParameter=17}">
                    <xctk:TrimmedTextBlock Text="{TemplateBinding SelectedObjectTypeName}"
                                  TextTrimming="CharacterEllipsis"
                                  FontWeight="Bold" />
                  </Grid>
                  <Grid MaxWidth="{Binding ActualWidth, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource HalfConverter}, ConverterParameter=17}"
                  Margin="5,0,0,0">
                    <xctk:TrimmedTextBlock Text="{TemplateBinding SelectedObjectName}"
                                  TextTrimming="CharacterEllipsis" />
                  </Grid>
                </StackPanel>
              </StackPanel>


              <Grid x:Name="toolsContainer"
             Grid.Row="1"
             Margin="4,0,4,4">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="Auto" />
                  <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <Grid x:Name="sortButtonContainer"
              Margin="4"
              Visibility="{Binding ShowSortOptions, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}">
                  <StackPanel Orientation="Horizontal"
                     Margin="1">
                    <RadioButton IsChecked="{Binding IsCategorized, RelativeSource={RelativeSource TemplatedParent}}"
                       VerticalAlignment="Center"
                       Style="{StaticResource OptionsToggleButtonStyle}"
                       ToolTip="Categorized">
                      <Path Width="16" Height="16"          
                            Data="F1 M 19,20.5833L 57,20.5833L 57,26.9167L 19,26.9167L 19,20.5833 Z M 19,30.0833L 57,30.0833L 57,36.4167L 19,36.4167L 19,30.0833 Z M 19,39.5833L 57,39.5833L 57,45.9167L 19,45.9167L 19,39.5833 Z M 19,49.0833L 57,49.0833L 57,55.4167L 19,55.4167L 19,49.0833 Z"
                            Fill="{DynamicResource ButtonText}"
                            Stretch="Uniform"
                            />
                    </RadioButton>
                    <RadioButton IsChecked="{Binding IsCategorized, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource InverseBoolConverter}, Mode=OneWay}"
                       VerticalAlignment="Center"
                       Style="{StaticResource OptionsToggleButtonStyle}"
                       ToolTip="Alphabetical">
                      <Path Width="16" Height="16"          
                            Data="F1 M 62.25,34L 35.75,34L 49,47.25L 62.25,34 Z M 28.9079,36L 28.1281,32.7344L 22.8358,32.7344L 21.9927,36L 16.25,36L 22.25,18L 28.75,18L 34.75,36L 28.9079,36 Z M 25.5433,22.1221L 25.4206,22.1221L 23.7502,28.9384L 27.1385,28.9384L 25.5433,22.1221 Z M 25,54L 33,54L 33,58L 19.006,58L 19.006,54.2515L 27,44L 19,44L 19,40L 33,40L 33,44L 25,54 Z"
                            Fill="{DynamicResource ButtonText}"
                            Stretch="Uniform"
                            />
                    </RadioButton>
                  </StackPanel>
                </Grid>

                <Border x:Name="searchBoxContainer"
                Grid.Column="1"
                Margin="4,4,0,4"
                Background="{DynamicResource WindowBackground}"
                BorderBrush="{DynamicResource ItemBorder}"
                BorderThickness="1"
                Visibility="{Binding ShowSearchBox, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}">
                  <Grid>
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="*" />
                      <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <xctk:WatermarkTextBox x:Name="_txtFilter"
                                  Background="Transparent"
                                  BorderThickness="0"
                                  Text="{Binding Filter, RelativeSource={RelativeSource TemplatedParent}, UpdateSourceTrigger=PropertyChanged}"
                                  Watermark="{TemplateBinding FilterWatermark}">
                    </xctk:WatermarkTextBox>

                    <Button Grid.Column="1"
                  Command="xctk:PropertyGridCommands.ClearFilter"
                  Style="{StaticResource ClearFilterButtonStyle}"
                  HorizontalAlignment="Left">
                    </Button>
                  </Grid>
                </Border>
              </Grid>

              <Grid Grid.Row="2" Background="{DynamicResource WindowBackground}">
                <ScrollViewer VerticalScrollBarVisibility="Auto">
                  <xctk:PropertyItemsControl x:Name="PART_PropertyItemsControl"
                                  IsTabStop="False"
                                  Focusable="False"
                                  ItemsSource="{Binding Properties, RelativeSource={RelativeSource TemplatedParent}}"
                                  ItemContainerStyle="{Binding PropertyContainerStyle, RelativeSource={RelativeSource TemplatedParent}}"
                                  Background="{DynamicResource WindowBackground}"
                                  VerticalAlignment="Top">
                    <ItemsControl.ItemsPanel>
                      <ItemsPanelTemplate>
                        <VirtualizingStackPanel />
                      </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>

                    <ItemsControl.GroupStyle>
                      <GroupStyle ContainerStyleSelector="{StaticResource CategoryGroupStyleSelector}" />
                    </ItemsControl.GroupStyle>

                  </xctk:PropertyItemsControl>
                </ScrollViewer>

                <Thumb x:Name="PART_DragThumb"
               HorizontalAlignment="Left"
               Width="5"
               Margin="6,0,0,0"
               Cursor="SizeWE">
                  <Thumb.Template>
                    <ControlTemplate>
                      <Border Background="Transparent" />
                    </ControlTemplate>
                  </Thumb.Template>
                </Thumb>

              </Grid>

              <GridSplitter Height="1"
                     Grid.Row="3"
                     HorizontalAlignment="Stretch"
                     Visibility="{Binding ShowSummary, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}" />
              <StackPanel Grid.Row="4"
                   Margin="0,0,0,5"
                   Visibility="{Binding ShowSummary, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}">
                <TextBlock Padding="2 2 2 0"
                   FontWeight="Bold"
                   Text="{Binding SelectedPropertyItem.DisplayName, RelativeSource={RelativeSource TemplatedParent}}" />
                <TextBlock Padding="5 2 2 0"
                   TextWrapping="WrapWithOverflow"
                   Text="{Binding SelectedPropertyItem.Description, RelativeSource={RelativeSource TemplatedParent}}" />
              </StackPanel>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition SourceName="searchBoxContainer"
                   Property="Visibility"
                   Value="Collapsed" />
                <Condition SourceName="sortButtonContainer"
                   Property="Visibility"
                   Value="Collapsed" />
              </MultiTrigger.Conditions>
              <Setter TargetName="toolsContainer"
               Property="Visibility"
               Value="Collapsed" />
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

</ResourceDictionary>